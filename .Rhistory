movie_ratings <- read.delim("Movie_rating_data/u.data", header=FALSE, sep="\t")
movies <- read.delim("Movie_rating_data/u.item", header=FALSE, sep="|")
head(movie_ratings)
head(movies)
movie_ratings <- read.delim("Movie_rating_data/u.data", header=FALSE, sep="\t")
movies <- read.delim("Movie_rating_data/u.item", header=FALSE, sep="|")
head(movie_ratings, n=5)
head(movies)
ratings_df <-movie_ratings[,-c(4)]  #movie_ratings[,c(1:3)]
movies_df <- movies[,c(1:2)]
head(ratings_df, n=3)
head(movies_df, n=3)
colnames(ratings_df) <- c("UserId", "MovieId", "Rating")
colnames(movies_df) <- c("MovieId", "Title")
head(ratings_df, n=3)
head(movies_df, n=3)
require(dplyr)
df_joined <- left_join(ratings_df,movies_df, by="MovieID")
require(dplyr)
df_joined <- left_join(ratings_df,movies_df, by="MovieId")
install.packages(dplyr)
require(dplyr)
df_joined <- left_join(ratings_df,movies_df, by="MovieId")
install.packages("dplyr")
require(dplyr)
df_joined <- left_join(ratings_df,movies_df, by="MovieId")
head(df_joined)
df_final <- df_joined[,-c(2)]
head(df_final, n=3)
rate_max <- as(df_final,"realRatingMatrix")
install.packages("recommenderlab")
library(recommenderlab)
rate_max <- as(df_final,"realRatingMatrix")
rate_max #matrix structure
rate_max1 <- getRatingMatrix(df_final)
df_finalM <- as(df_final,"matrix")
rate_max1 <- getRatingMatrix(df_finalM)
df_finalM <- as.matrix(df_final)
rate_max1 <- getRatingMatrix(df_finalM)
rate_max <- as(ratings_df,"realRatingMatrix")
rate_max #matrix structure
rate_freq <- as.data.frame(table(df_final$Rating))
rate_freq
barplot(rate_freq$Freq,names.arg = c(1,2,3,4,5), xlab="Rating",
main="Histogram of Rating Frequencies", col=("red","green", "blue", "teal", "salmon"), cex.names=0.7, cex.axis=0.5)
barplot(rate_freq$Freq,names.arg = c(1,2,3,4,5), xlab="Rating",
main="Histogram of Rating Frequencies", col=c("red","green", "blue", "teal", "salmon"), cex.names=0.7, cex.axis=0.5)
barplot(rate_freq$Freq,names.arg = c(1,2,3,4,5), xlab="Rating",
main="Histogram of Rating Frequencies", col=c("red","green", "blue", "yellow", "salmon"), cex.names=0.7, cex.axis=0.5)
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
split_scheme <-evaluationScheme(rate_max, method="split", train=0.8, goodRating=3)
split_scheme <-evaluationScheme(rate_max, method="split", train=0.8, given=5, goodRating=3)
split_scheme
cv_scheme <-evaluationScheme(rate_max, method="cross-validation", k=5, give=-1, goodRating=3)
cv_scheme
r_svg <- Recommender(getData(split_scheme, "train"), "SVD")
r_pop <- Recommender(getData(split_scheme, "train"), "POPULAR")
r_ubcf <- Recommender(getData(split_scheme, "train"), "UBCF")
r_ibcf <- Recommender(getData(split_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg <- predict(r_svg, getData(split_scheme, "known"), type="ratings")
p_pop <- predict(r_pop,getData(split_scheme, "known"),  type="ratings")
p_ubcf <- predict(r_ubcf,getData(split_scheme, "known"),  type="ratings")
p_ibcf <- predict(r_ibcf,getData(split_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg <- calcPredictionAccuracy(p_svg, getData(split_scheme, "known"), type="ratings")
err_pop <- predict(p_pop,getData(split_scheme, "unknown"))
r_svg <- Recommender(getData(split_scheme, "train"), "SVD")
r_pop <- Recommender(getData(split_scheme, "train"), "POPULAR")
r_ubcf <- Recommender(getData(split_scheme, "train"), "UBCF")
r_ibcf <- Recommender(getData(split_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg <- predict(r_svg, getData(split_scheme, "known"), type="ratings")
p_pop <- predict(r_pop,getData(split_scheme, "known"),  type="ratings")
p_ubcf <- predict(r_ubcf,getData(split_scheme, "known"),  type="ratings")
p_ibcf <- predict(r_ibcf,getData(split_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg <- calcPredictionAccuracy(p_svg, getData(split_scheme, "known"))
err_pop <- calcPredictionAccuracy(p_pop,getData(split_scheme, "unknown"))
err_ubcf <- calcPredictionAccuracy(p_ubcf,getData(split_scheme, "unknown"))
err_ibcf <- calcPredictionAccuracy(p_ibcf,getData(split_scheme, "unknown"))
#create error dataframe
df_err <- rbind(err_svg, err_pop, err_ubcf, err_ibcf)
df_err
r_svg <- Recommender(getData(split_scheme, "train"), "SVD")
r_pop <- Recommender(getData(split_scheme, "train"), "POPULAR")
r_ubcf <- Recommender(getData(split_scheme, "train"), "UBCF")
r_ibcf <- Recommender(getData(split_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg <- predict(r_svg, getData(split_scheme, "known"), type="ratings")
p_pop <- predict(r_pop,getData(split_scheme, "known"),  type="ratings")
p_ubcf <- predict(r_ubcf,getData(split_scheme, "known"),  type="ratings")
p_ibcf <- predict(r_ibcf,getData(split_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg <- calcPredictionAccuracy(p_svg, getData(split_scheme, "unknown"))
err_pop <- calcPredictionAccuracy(p_pop,getData(split_scheme, "unknown"))
err_ubcf <- calcPredictionAccuracy(p_ubcf,getData(split_scheme, "unknown"))
err_ibcf <- calcPredictionAccuracy(p_ibcf,getData(split_scheme, "unknown"))
#create error dataframe
df_err <- rbind(err_svg, err_pop, err_ubcf, err_ibcf)
df_err
r_svg1 <- Recommender(getData(cv_scheme, "train"), "SVD")
r_pop1 <- Recommender(getData(cv_scheme, "train"), "POPULAR")
r_ubcf1 <- Recommender(getData(cv_scheme, "train"), "UBCF")
r_ibcf1 <- Recommender(getData(cv_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg1 <- predict(r_svg, getData(cv_scheme, "known"), type="ratings")
p_pop1 <- predict(r_pop,getData(cv_scheme, "known"),  type="ratings")
p_ubcf1 <- predict(r_ubcf,getData(cv_scheme, "known"),  type="ratings")
p_ibcf1 <- predict(r_ibcf,getData(cv_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg1 <- calcPredictionAccuracy(p_svg, getData(cv_scheme, "unknown"))
r_svg1 <- Recommender(getData(cv_scheme, "train"), "SVD")
r_pop1 <- Recommender(getData(cv_scheme, "train"), "POPULAR")
r_ubcf1 <- Recommender(getData(cv_scheme, "train"), "UBCF")
r_ibcf1 <- Recommender(getData(cv_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg1 <- predict(r_svg1, getData(cv_scheme, "known"), type="ratings")
p_pop1 <- predict(r_pop1,getData(cv_scheme, "known"),  type="ratings")
p_ubcf1 <- predict(r_ubcf1,getData(cv_scheme, "known"),  type="ratings")
p_ibcf1 <- predict(r_ibcf1,getData(cv_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg1 <- calcPredictionAccuracy(p_svg1, getData(cv_scheme, "unknown"))
err_pop1 <- calcPredictionAccuracy(p_pop1,getData(cv_scheme, "unknown"))
err_ubcf1 <- calcPredictionAccuracy(p_ubcf1,getData(cv_scheme, "unknown"))
err_ibcf1 <- calcPredictionAccuracy(p_ibcf1,getData(cv_scheme, "unknown"))
#create error dataframe
df_err1 <- rbind(err_svg1, err_pop1, err_ubcf1, err_ibcf1)
df_err1
rec <- recommender(rate_max, method="SVD")
rec <- Recommender(rate_max, method="SVD")
rec
recom_user1 <- predict(rec, r[1], n=5)
recom_user1 <- predict(rec, 1, n=5)
movie_ratings <- read.delim("Movie_rating_data/u.data", header=FALSE, sep="\t")
movies <- read.delim("Movie_rating_data/u.item", header=FALSE, sep="|")
head(movie_ratings, n=5)
head(movies)
ratings_df <-movie_ratings[,-c(4)]  #movie_ratings[,c(1:3)]
movies_df <- movies[,c(1:2)]
head(ratings_df, n=3)
head(movies_df, n=3)
colnames(ratings_df) <- c("UserId", "MovieId", "Rating")
colnames(movies_df) <- c("MovieId", "Title")
head(ratings_df, n=3)
head(movies_df, n=3)
require(dplyr)
df_joined <- left_join(ratings_df,movies_df, by="MovieId")
head(df_joined)
df_final <- df_joined[,-c(2)]
head(df_final, n=3)
library(recommenderlab)
rate_max <- as(ratings_df,"realRatingMatrix")
rate_max #matrix structure
#df_finalM <- as.matrix(df_final)
rate_max1 <- getRatingMatrix(df_final)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#df_finalM <- as.matrix(df_final)
rate_max1 <- getRatingMatrix(df_final)
#df_finalM <- as.matrix(df_final)
rate_max1 <- as(df_final, "realRatingMatrix")
rate_max1
head(df_final, n=10)
df_final <- select(df_final,UserID, )
df_final <- select(df_final,UserID, Title, Rating)
df_final1 <- select(df_final,UserID, Title, Rating)
head(df_final)
df_final1 <- select(df_final,UserId, Title, Rating)
head(df_final1, n=10)
#df_finalM <- as.matrix(df_final)
rate_max1 <- as(df_final1, "realRatingMatrix")
rate_max1
split_scheme <-evaluationScheme(rate_max1, method="split", train=0.8, given=5, goodRating=3)
split_scheme
cv_scheme <-evaluationScheme(rate_max1, method="cross-validation", k=5, give=-1, goodRating=3)
cv_scheme
r_svg <- Recommender(getData(split_scheme, "train"), "SVD")
r_pop <- Recommender(getData(split_scheme, "train"), "POPULAR")
r_ubcf <- Recommender(getData(split_scheme, "train"), "UBCF")
r_ibcf <- Recommender(getData(split_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg <- predict(r_svg, getData(split_scheme, "known"), type="ratings")
p_pop <- predict(r_pop,getData(split_scheme, "known"),  type="ratings")
p_ubcf <- predict(r_ubcf,getData(split_scheme, "known"),  type="ratings")
p_ibcf <- predict(r_ibcf,getData(split_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg <- calcPredictionAccuracy(p_svg, getData(split_scheme, "unknown"))
err_pop <- calcPredictionAccuracy(p_pop,getData(split_scheme, "unknown"))
err_ubcf <- calcPredictionAccuracy(p_ubcf,getData(split_scheme, "unknown"))
err_ibcf <- calcPredictionAccuracy(p_ibcf,getData(split_scheme, "unknown"))
#create error dataframe
df_err <- rbind(err_svg, err_pop, err_ubcf, err_ibcf)
df_err
r_svg1 <- Recommender(getData(cv_scheme, "train"), "SVD")
r_pop1 <- Recommender(getData(cv_scheme, "train"), "POPULAR")
r_ubcf1 <- Recommender(getData(cv_scheme, "train"), "UBCF")
r_ibcf1 <- Recommender(getData(cv_scheme, "train"), "IBCF")
##test the models (predictive accuracy)
p_svg1 <- predict(r_svg1, getData(cv_scheme, "known"), type="ratings")
p_pop1 <- predict(r_pop1,getData(cv_scheme, "known"),  type="ratings")
p_ubcf1 <- predict(r_ubcf1,getData(cv_scheme, "known"),  type="ratings")
p_ibcf1 <- predict(r_ibcf1,getData(cv_scheme, "known"),  type="ratings")
##generate prediction errors
err_svg1 <- calcPredictionAccuracy(p_svg1, getData(cv_scheme, "unknown"))
err_pop1 <- calcPredictionAccuracy(p_pop1,getData(cv_scheme, "unknown"))
err_ubcf1 <- calcPredictionAccuracy(p_ubcf1,getData(cv_scheme, "unknown"))
err_ibcf1 <- calcPredictionAccuracy(p_ibcf1,getData(cv_scheme, "unknown"))
#create error dataframe
df_err1 <- rbind(err_svg1, err_pop1, err_ubcf1, err_ibcf1)
df_err1
rec <- Recommender(rate_max, method="SVD")
rec
recom_user1 <- predict(rec, r[1], n=5)
recom_user1 <- predict(rec, rate_max1[1], n=5)
rec <- Recommender(rate_max1, method="SVD")
rec
recom_user1 <- predict(rec, rate_max1[1], n=5)
recom_user1
result1 <- as(recom_user1, "list")
result1
result1 <- as(recom_user1, "list")
print("Recommended Movies for User with UserId = 1")
print("=============================================")
result1
result1 <- as(recom_user1, "list")
print("Recommended Movies for User with UserId = 1")
print("=============================================")
result1[0]
result1 <- as(recom_user1, "list")
print("Recommended Movies for User with UserId = 1")
print("=============================================")
result1[1]
result1 <- as(recom_user1, "list")
print("Recommended Movies for User with UserId = 1")
print("=============================================")
result1
recom_user10 <- predict(rec, rate_max1[10], n=3)
recom_user10
result1 <- as(recom_user1, "list")
print("Top 5 Recommended Movies for User with UserId = 1")
print("=============================================")
result1
result1 <- as(recom_user1, "list")
print("Top 5 Recommended Movies for User with UserId = 1")
print("==================================================")
result1
result10 <- as(recom_user1, "list")
print("Top 3 Recommended Movies for User with UserId = 10")
print("===================================================")
result10
recom_user10 <- predict(rec, rate_max1[10], n=3)
recom_user10
result10 <- as(recom_user1, "list")
print("Top 3 Recommended Movies for User with UserId = 10")
print("===================================================")
result10
result10 <- as(recom_user10, "list")
print("Top 3 Recommended Movies for User with UserId = 10")
print("===================================================")
result10
recom_users6 <- predict(rec, rate_max1[15:20], n=5)
recom_users6
#install.packages("tidyverse")
#library(tidyverse)
results_users6 <- as(recom_users6, "list")
i=1
while (i<=6) {
print("Top 5 Recommended Movies for User with UserId =" +i)
print("===================================================")
results_users6[i]
}
results_users6 <- as(recom_users6, "list")
i=1
while (i<=6) {
print("Top 5 Recommended Movies for User with UserId =" +i)
print("===================================================")
results_users6[i]
i = i+1
}
results_users6 <- as(recom_users6, "list")
i=1
while (i<=6) {
print(paste("Top 5 Recommended Movies for User with UserId =", i))
print("===================================================")
results_users6[i]
i = i+1
}
results_users6 <- as(recom_users6, "list")
i=1
while (i<=6) {
print(paste("Top 5 Recommended Movies for User with UserId =", i))
print("===================================================")
print(results_users6[i])
i = i+1
}
results_users6 <- as(recom_users6, "list")
i=15
while (i<=20) {
print(paste("Top 5 Recommended Movies for User with UserId =", i))
print("===================================================")
print(results_users6[i])
i = i+1
}
results_users6 <- as(recom_users6, "list")
userIds <- c(15:20)
i=1
while (i<=20) {
print(paste("Top 5 Recommended Movies for User with UserId =", userIds[i+1]))
print("===================================================")
print(results_users6[i])
i = i+1
}
results_users6 <- as(recom_users6, "list")
userIds <- c(15:20)
i=1
while (i<=20) {
print(paste("Top 5 Recommended Movies for User with UserId =", userIds[i]))
print("===================================================")
print(results_users6[i])
i = i+1
}
results_users6 <- as(recom_users6, "list")
userIds <- c(15:20)
i=1
while (i<=5) {
print(paste("Top 5 Recommended Movies for User with UserId =", userIds[i]))
print("===================================================")
print(results_users6[i])
i = i+1
}
results_users6 <- as(recom_users6, "list")
userIds <- c(15:20)
i=1
while (i<=6) {
print(paste("Top 5 Recommended Movies for User with UserId =", userIds[i]))
print("===================================================")
print(results_users6[i])
i = i+1
}
